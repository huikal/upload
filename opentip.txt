여기에서 수행한 각 Git 명령어와 그 역할을 설명해 드리겠습니다:

디렉토리 생성 및 이동

bash
코드 복사
$ mkdir github-git
$ mkdir git-for-study
$ cd git-for-study/
mkdir github-git: github-git이라는 디렉토리를 생성합니다.
mkdir git-for-study: git-for-study라는 디렉토리를 생성합니다.
cd git-for-study/: git-for-study 디렉토리로 이동합니다.
Git 초기화

bash
코드 복사
$ git init -b main
현재 디렉토리를 Git 저장소로 초기화하고 기본 브랜치를 main으로 설정합니다.
Git 상태 확인

bash
코드 복사
$ git status
현재 브랜치 상태를 확인합니다. 현재는 커밋이 없고 추적된 파일이 없다는 메시지가 표시됩니다.
디렉토리 내용 확인

bash
코드 복사
$ ls
$ ls -al
ls: 현재 디렉토리의 파일 목록을 표시합니다. 아무 파일도 없으므로 아무 출력도 없습니다.
ls -al: 숨김 파일을 포함한 모든 파일 목록과 파일의 자세한 정보를 표시합니다. .git 디렉토리가 있음을 확인할 수 있습니다.
Git 사용자 정보 설정

bash
코드 복사
$ git config --global user.name
$ git config --global user.email "kyh0106855@gmail.com"
$ git config --global color.ui auto
$ git config --global color.ui white
$ git config --global color.ui auto
git config --global user.name: 사용자 이름을 설정하거나 확인합니다.
git config --global user.email "kyh0106855@gmail.com": 사용자 이메일을 설정합니다.
git config --global color.ui auto: Git 출력에서 색상을 자동으로 사용하도록 설정합니다.
git config --global color.ui white: 색상을 white로 설정합니다.
git config --global color.ui auto: 다시 색상을 자동으로 설정합니다.
파일 커밋 시도

bash
코드 복사
$ git commit -m "first commit"
첫 번째 커밋을 시도하지만, 추적된 파일이 없어서 커밋이 실패합니다.
브랜치 이름 변경

bash
코드 복사
$ git branch -M main
현재 브랜치 이름을 main으로 변경합니다.
원격 저장소 추가

bash
코드 복사
$ git remote add origin https://github.com/huikal/2024_git_study.git
원격 저장소를 추가합니다. 이 경우 https://github.com/huikal/2024_git_study.git를 origin이라는 이름으로 추가합니다.
파일 생성 및 커밋

bash
코드 복사
$ ls
$ git commit -m "first commit"
$ git add step1.txt
$ git commit -m "first commit"
ls: 파일 목록을 확인합니다. step1.txt 파일이 있음을 확인할 수 있습니다.
git commit -m "first commit": 다시 커밋을 시도하지만, 추적되지 않은 파일이 있어서 실패합니다.
git add step1.txt: step1.txt 파일을 추적하도록 추가합니다.
git commit -m "first commit": 첫 번째 커밋을 성공적으로 수행합니다.
원격 저장소에 푸시

bash
코드 복사
$ git push -u origin main
로컬 브랜치 main을 원격 저장소 origin의 main 브랜치로 푸시합니다.
-u 옵션은 로컬 main 브랜치가 원격 main 브랜치를 추적하도록 설정합니다.
이 로그는 Git 저장소를 초기화하고, 사용자 설정을 하고, 파일을 추가하여 커밋한 후, 원격 저장소에 푸시하는 과정입니다. 이를 통해 Git을 사용하여 로컬에서 작업한 내용을 원격 저장소와 동기화하는 기본적인 작업 흐름을 확인할 수 있습니다.